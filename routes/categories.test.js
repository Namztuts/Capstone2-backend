'use strict';

const request = require('supertest');
const app = require('../app');
const {
   commonBeforeAll,
   commonBeforeEach,
   commonAfterEach,
   commonAfterAll,
   testCategories,
} = require('./_testCommon');

beforeAll(commonBeforeAll);
beforeEach(commonBeforeEach);
afterEach(commonAfterEach);
afterAll(commonAfterAll);

/************************************** POST /categories */
describe('POST /categories', () => {
   test('creates a new category', async () => {
      const newCat = { name: 'Toys' };
      const resp = await request(app).post('/categories').send(newCat);
      expect(resp.statusCode).toBe(201);
      expect(resp.body.category).toHaveProperty('id'); // id generated by DB
      expect(resp.body.category.name).toBe(newCat.name);
   });

   test('fails with invalid data', async () => {
      const resp = await request(app).post('/categories').send({ name: '' });
      expect(resp.statusCode).toBe(400);
   });
});

/************************************** GET /categories */
describe('GET /categories', () => {
   test('gets all categories', async () => {
      const resp = await request(app).get('/categories');
      expect(resp.statusCode).toBe(200);
      expect(resp.body.categories.length).toBeGreaterThanOrEqual(3);
   });
});

// /************************************** GET /categories/:id */
describe('GET /categories/:id', () => {
   test('gets a specific category', async () => {
      const cat = testCategories[0];
      const resp = await request(app).get(`/categories/${cat.id}`);
      expect(resp.statusCode).toBe(200);
      expect(resp.body.category).toEqual(cat);
   });

   test('returns 404 for invalid id', async () => {
      const resp = await request(app).get('/categories/9999');
      expect(resp.statusCode).toBe(404);
   });
});

// /************************************** GET /categories/:id/products */
describe('GET /categories/:id/products', () => {
   test('gets products by category', async () => {
      const cat = testCategories[0];
      const resp = await request(app).get(`/categories/${cat.id}/products`);
      expect(resp.statusCode).toBe(200);
      expect(resp.body.category.id).toEqual(cat.id);
      expect(resp.body.category.items).toBeInstanceOf(Array);
   });
});

// /************************************** PATCH /categories/:id */
describe('PATCH /categories/:id', () => {
   test('updates a category', async () => {
      const resp = await request(app)
         .patch('/categories/1')
         .send({ name: 'Updated Electronics' });
      expect(resp.statusCode).toBe(200);
      expect(resp.body.category.name).toBe('Updated Electronics');
   });

   test('fails with invalid data', async () => {
      const resp = await request(app).patch('/categories/1').send({ name: '' });
      expect(resp.statusCode).toBe(400);
   });
});

// /************************************** DELETE /categories/:id */
describe('DELETE /categories/:id', () => {
   test('deletes a category', async () => {
      const resp = await request(app).delete('/categories/3');
      expect(resp.statusCode).toBe(200);
      expect(resp.body).toEqual({ deleted: '3' });
   });

   test('returns 404 for missing category', async () => {
      const resp = await request(app).delete('/categories/999');
      expect(resp.statusCode).toBe(404);
   });
});
